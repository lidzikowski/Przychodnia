//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrzychodniaUnitTest.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lekarz", Namespace="http://schemas.datacontract.org/2004/07/PrzychodniaDLL")]
    [System.SerializableAttribute()]
    public partial class Lekarz : PrzychodniaUnitTest.ServiceReference1.BaseDLL {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazwiskoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imie {
            get {
                return this.ImieField;
            }
            set {
                if ((object.ReferenceEquals(this.ImieField, value) != true)) {
                    this.ImieField = value;
                    this.RaisePropertyChanged("Imie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nazwisko {
            get {
                return this.NazwiskoField;
            }
            set {
                if ((object.ReferenceEquals(this.NazwiskoField, value) != true)) {
                    this.NazwiskoField = value;
                    this.RaisePropertyChanged("Nazwisko");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDLL", Namespace="http://schemas.datacontract.org/2004/07/PrzychodniaDLL")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PrzychodniaUnitTest.ServiceReference1.Pacjent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PrzychodniaUnitTest.ServiceReference1.Choroba))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PrzychodniaUnitTest.ServiceReference1.Lek))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PrzychodniaUnitTest.ServiceReference1.Grafik))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PrzychodniaUnitTest.ServiceReference1.Lekarz))]
    public partial class BaseDLL : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AktywnyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DataStworzeniaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Aktywny {
            get {
                return this.AktywnyField;
            }
            set {
                if ((this.AktywnyField.Equals(value) != true)) {
                    this.AktywnyField = value;
                    this.RaisePropertyChanged("Aktywny");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DataStworzenia {
            get {
                return this.DataStworzeniaField;
            }
            set {
                if ((this.DataStworzeniaField.Equals(value) != true)) {
                    this.DataStworzeniaField = value;
                    this.RaisePropertyChanged("DataStworzenia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pacjent", Namespace="http://schemas.datacontract.org/2004/07/PrzychodniaDLL")]
    [System.SerializableAttribute()]
    public partial class Pacjent : PrzychodniaUnitTest.ServiceReference1.BaseDLL {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PrzychodniaUnitTest.ServiceReference1.Choroba[] ChorobyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazwiskoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PrzychodniaUnitTest.ServiceReference1.Choroba[] Choroby {
            get {
                return this.ChorobyField;
            }
            set {
                if ((object.ReferenceEquals(this.ChorobyField, value) != true)) {
                    this.ChorobyField = value;
                    this.RaisePropertyChanged("Choroby");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imie {
            get {
                return this.ImieField;
            }
            set {
                if ((object.ReferenceEquals(this.ImieField, value) != true)) {
                    this.ImieField = value;
                    this.RaisePropertyChanged("Imie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nazwisko {
            get {
                return this.NazwiskoField;
            }
            set {
                if ((object.ReferenceEquals(this.NazwiskoField, value) != true)) {
                    this.NazwiskoField = value;
                    this.RaisePropertyChanged("Nazwisko");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Choroba", Namespace="http://schemas.datacontract.org/2004/07/PrzychodniaDLL")]
    [System.SerializableAttribute()]
    public partial class Choroba : PrzychodniaUnitTest.ServiceReference1.BaseDLL {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PrzychodniaUnitTest.ServiceReference1.Lek[] LekiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazwaField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PrzychodniaUnitTest.ServiceReference1.Lek[] Leki {
            get {
                return this.LekiField;
            }
            set {
                if ((object.ReferenceEquals(this.LekiField, value) != true)) {
                    this.LekiField = value;
                    this.RaisePropertyChanged("Leki");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nazwa {
            get {
                return this.NazwaField;
            }
            set {
                if ((object.ReferenceEquals(this.NazwaField, value) != true)) {
                    this.NazwaField = value;
                    this.RaisePropertyChanged("Nazwa");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lek", Namespace="http://schemas.datacontract.org/2004/07/PrzychodniaDLL")]
    [System.SerializableAttribute()]
    public partial class Lek : PrzychodniaUnitTest.ServiceReference1.BaseDLL {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CzasStosowaniaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazwaField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CzasStosowania {
            get {
                return this.CzasStosowaniaField;
            }
            set {
                if ((this.CzasStosowaniaField.Equals(value) != true)) {
                    this.CzasStosowaniaField = value;
                    this.RaisePropertyChanged("CzasStosowania");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nazwa {
            get {
                return this.NazwaField;
            }
            set {
                if ((object.ReferenceEquals(this.NazwaField, value) != true)) {
                    this.NazwaField = value;
                    this.RaisePropertyChanged("Nazwa");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Grafik", Namespace="http://schemas.datacontract.org/2004/07/PrzychodniaDLL")]
    [System.SerializableAttribute()]
    public partial class Grafik : PrzychodniaUnitTest.ServiceReference1.BaseDLL {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> DiagnozaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime GodzinaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PrzychodniaUnitTest.ServiceReference1.Lekarz LekarzField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PrzychodniaUnitTest.ServiceReference1.Pacjent PacjentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Diagnoza {
            get {
                return this.DiagnozaField;
            }
            set {
                if ((this.DiagnozaField.Equals(value) != true)) {
                    this.DiagnozaField = value;
                    this.RaisePropertyChanged("Diagnoza");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Godzina {
            get {
                return this.GodzinaField;
            }
            set {
                if ((this.GodzinaField.Equals(value) != true)) {
                    this.GodzinaField = value;
                    this.RaisePropertyChanged("Godzina");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PrzychodniaUnitTest.ServiceReference1.Lekarz Lekarz {
            get {
                return this.LekarzField;
            }
            set {
                if ((object.ReferenceEquals(this.LekarzField, value) != true)) {
                    this.LekarzField = value;
                    this.RaisePropertyChanged("Lekarz");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PrzychodniaUnitTest.ServiceReference1.Pacjent Pacjent {
            get {
                return this.PacjentField;
            }
            set {
                if ((object.ReferenceEquals(this.PacjentField, value) != true)) {
                    this.PacjentField = value;
                    this.RaisePropertyChanged("Pacjent");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Ping", ReplyAction="http://tempuri.org/IService1/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Ping", ReplyAction="http://tempuri.org/IService1/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzLekarzy", ReplyAction="http://tempuri.org/IService1/PobierzLekarzyResponse")]
        PrzychodniaUnitTest.ServiceReference1.Lekarz[] PobierzLekarzy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzLekarzy", ReplyAction="http://tempuri.org/IService1/PobierzLekarzyResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lekarz[]> PobierzLekarzyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajLekarza", ReplyAction="http://tempuri.org/IService1/DodajLekarzaResponse")]
        PrzychodniaUnitTest.ServiceReference1.Lekarz DodajLekarza(PrzychodniaUnitTest.ServiceReference1.Lekarz lekarz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajLekarza", ReplyAction="http://tempuri.org/IService1/DodajLekarzaResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lekarz> DodajLekarzaAsync(PrzychodniaUnitTest.ServiceReference1.Lekarz lekarz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunLekarza", ReplyAction="http://tempuri.org/IService1/UsunLekarzaResponse")]
        bool UsunLekarza(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunLekarza", ReplyAction="http://tempuri.org/IService1/UsunLekarzaResponse")]
        System.Threading.Tasks.Task<bool> UsunLekarzaAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzPacjentow", ReplyAction="http://tempuri.org/IService1/PobierzPacjentowResponse")]
        PrzychodniaUnitTest.ServiceReference1.Pacjent[] PobierzPacjentow();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzPacjentow", ReplyAction="http://tempuri.org/IService1/PobierzPacjentowResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Pacjent[]> PobierzPacjentowAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajPacjenta", ReplyAction="http://tempuri.org/IService1/DodajPacjentaResponse")]
        PrzychodniaUnitTest.ServiceReference1.Pacjent DodajPacjenta(PrzychodniaUnitTest.ServiceReference1.Pacjent pacjent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajPacjenta", ReplyAction="http://tempuri.org/IService1/DodajPacjentaResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Pacjent> DodajPacjentaAsync(PrzychodniaUnitTest.ServiceReference1.Pacjent pacjent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunPacjenta", ReplyAction="http://tempuri.org/IService1/UsunPacjentaResponse")]
        bool UsunPacjenta(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunPacjenta", ReplyAction="http://tempuri.org/IService1/UsunPacjentaResponse")]
        System.Threading.Tasks.Task<bool> UsunPacjentaAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzChoroby", ReplyAction="http://tempuri.org/IService1/PobierzChorobyResponse")]
        PrzychodniaUnitTest.ServiceReference1.Choroba[] PobierzChoroby();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzChoroby", ReplyAction="http://tempuri.org/IService1/PobierzChorobyResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Choroba[]> PobierzChorobyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajChorobe", ReplyAction="http://tempuri.org/IService1/DodajChorobeResponse")]
        PrzychodniaUnitTest.ServiceReference1.Choroba DodajChorobe(PrzychodniaUnitTest.ServiceReference1.Choroba choroba);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajChorobe", ReplyAction="http://tempuri.org/IService1/DodajChorobeResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Choroba> DodajChorobeAsync(PrzychodniaUnitTest.ServiceReference1.Choroba choroba);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunChorobe", ReplyAction="http://tempuri.org/IService1/UsunChorobeResponse")]
        bool UsunChorobe(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunChorobe", ReplyAction="http://tempuri.org/IService1/UsunChorobeResponse")]
        System.Threading.Tasks.Task<bool> UsunChorobeAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzLeki", ReplyAction="http://tempuri.org/IService1/PobierzLekiResponse")]
        PrzychodniaUnitTest.ServiceReference1.Lek[] PobierzLeki();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzLeki", ReplyAction="http://tempuri.org/IService1/PobierzLekiResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lek[]> PobierzLekiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajLek", ReplyAction="http://tempuri.org/IService1/DodajLekResponse")]
        PrzychodniaUnitTest.ServiceReference1.Lek DodajLek(PrzychodniaUnitTest.ServiceReference1.Lek lek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajLek", ReplyAction="http://tempuri.org/IService1/DodajLekResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lek> DodajLekAsync(PrzychodniaUnitTest.ServiceReference1.Lek lek);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunLek", ReplyAction="http://tempuri.org/IService1/UsunLekResponse")]
        bool UsunLek(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunLek", ReplyAction="http://tempuri.org/IService1/UsunLekResponse")]
        System.Threading.Tasks.Task<bool> UsunLekAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzGrafik", ReplyAction="http://tempuri.org/IService1/PobierzGrafikResponse")]
        PrzychodniaUnitTest.ServiceReference1.Grafik[] PobierzGrafik(System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PobierzGrafik", ReplyAction="http://tempuri.org/IService1/PobierzGrafikResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Grafik[]> PobierzGrafikAsync(System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajGrafik", ReplyAction="http://tempuri.org/IService1/DodajGrafikResponse")]
        PrzychodniaUnitTest.ServiceReference1.Grafik DodajGrafik(PrzychodniaUnitTest.ServiceReference1.Grafik grafik);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DodajGrafik", ReplyAction="http://tempuri.org/IService1/DodajGrafikResponse")]
        System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Grafik> DodajGrafikAsync(PrzychodniaUnitTest.ServiceReference1.Grafik grafik);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunGrafik", ReplyAction="http://tempuri.org/IService1/UsunGrafikResponse")]
        bool UsunGrafik(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UsunGrafik", ReplyAction="http://tempuri.org/IService1/UsunGrafikResponse")]
        System.Threading.Tasks.Task<bool> UsunGrafikAsync(long id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : PrzychodniaUnitTest.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<PrzychodniaUnitTest.ServiceReference1.IService1>, PrzychodniaUnitTest.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Lekarz[] PobierzLekarzy() {
            return base.Channel.PobierzLekarzy();
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lekarz[]> PobierzLekarzyAsync() {
            return base.Channel.PobierzLekarzyAsync();
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Lekarz DodajLekarza(PrzychodniaUnitTest.ServiceReference1.Lekarz lekarz) {
            return base.Channel.DodajLekarza(lekarz);
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lekarz> DodajLekarzaAsync(PrzychodniaUnitTest.ServiceReference1.Lekarz lekarz) {
            return base.Channel.DodajLekarzaAsync(lekarz);
        }
        
        public bool UsunLekarza(long id) {
            return base.Channel.UsunLekarza(id);
        }
        
        public System.Threading.Tasks.Task<bool> UsunLekarzaAsync(long id) {
            return base.Channel.UsunLekarzaAsync(id);
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Pacjent[] PobierzPacjentow() {
            return base.Channel.PobierzPacjentow();
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Pacjent[]> PobierzPacjentowAsync() {
            return base.Channel.PobierzPacjentowAsync();
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Pacjent DodajPacjenta(PrzychodniaUnitTest.ServiceReference1.Pacjent pacjent) {
            return base.Channel.DodajPacjenta(pacjent);
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Pacjent> DodajPacjentaAsync(PrzychodniaUnitTest.ServiceReference1.Pacjent pacjent) {
            return base.Channel.DodajPacjentaAsync(pacjent);
        }
        
        public bool UsunPacjenta(long id) {
            return base.Channel.UsunPacjenta(id);
        }
        
        public System.Threading.Tasks.Task<bool> UsunPacjentaAsync(long id) {
            return base.Channel.UsunPacjentaAsync(id);
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Choroba[] PobierzChoroby() {
            return base.Channel.PobierzChoroby();
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Choroba[]> PobierzChorobyAsync() {
            return base.Channel.PobierzChorobyAsync();
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Choroba DodajChorobe(PrzychodniaUnitTest.ServiceReference1.Choroba choroba) {
            return base.Channel.DodajChorobe(choroba);
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Choroba> DodajChorobeAsync(PrzychodniaUnitTest.ServiceReference1.Choroba choroba) {
            return base.Channel.DodajChorobeAsync(choroba);
        }
        
        public bool UsunChorobe(long id) {
            return base.Channel.UsunChorobe(id);
        }
        
        public System.Threading.Tasks.Task<bool> UsunChorobeAsync(long id) {
            return base.Channel.UsunChorobeAsync(id);
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Lek[] PobierzLeki() {
            return base.Channel.PobierzLeki();
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lek[]> PobierzLekiAsync() {
            return base.Channel.PobierzLekiAsync();
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Lek DodajLek(PrzychodniaUnitTest.ServiceReference1.Lek lek) {
            return base.Channel.DodajLek(lek);
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Lek> DodajLekAsync(PrzychodniaUnitTest.ServiceReference1.Lek lek) {
            return base.Channel.DodajLekAsync(lek);
        }
        
        public bool UsunLek(long id) {
            return base.Channel.UsunLek(id);
        }
        
        public System.Threading.Tasks.Task<bool> UsunLekAsync(long id) {
            return base.Channel.UsunLekAsync(id);
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Grafik[] PobierzGrafik(System.DateTime dateTime) {
            return base.Channel.PobierzGrafik(dateTime);
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Grafik[]> PobierzGrafikAsync(System.DateTime dateTime) {
            return base.Channel.PobierzGrafikAsync(dateTime);
        }
        
        public PrzychodniaUnitTest.ServiceReference1.Grafik DodajGrafik(PrzychodniaUnitTest.ServiceReference1.Grafik grafik) {
            return base.Channel.DodajGrafik(grafik);
        }
        
        public System.Threading.Tasks.Task<PrzychodniaUnitTest.ServiceReference1.Grafik> DodajGrafikAsync(PrzychodniaUnitTest.ServiceReference1.Grafik grafik) {
            return base.Channel.DodajGrafikAsync(grafik);
        }
        
        public bool UsunGrafik(long id) {
            return base.Channel.UsunGrafik(id);
        }
        
        public System.Threading.Tasks.Task<bool> UsunGrafikAsync(long id) {
            return base.Channel.UsunGrafikAsync(id);
        }
    }
}
